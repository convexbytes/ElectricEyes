/************************************************************/
/*	Author:			Gilberto Monroy Aguilar					*/
/*	Creation date: 	Monday 09-Dec-2013						*/
/*	Purpose: 		Grammar definition and parser  			*/
/*					configuration							*/
/*															*/
/************************************************************/

/* Avoid double backslash comments on this file 				*/
/* because may cause problem in automatically generated code 	*/
/* by bison or flex.											*/

%{
/* The folling code is included at the beggining of the cc file */
	#include <string>
	#include <stdio.h>
	#include "client_parser_types.h"
	#include "client_parser_driver.h" /* This one needs to be on the cc file because it contains YY_LEC and yylex definition, needs to be processed after hh is created because it uses namesace yy */

	using namespace ClientParser; /* Use the namespace ClientParser for the rules to know it. */

	/* Temporal objects to store values */
	MessageType msg_type;
	Init 		tmp_init;
	ServerParam tmp_server_param;
	PlayerParam tmp_player_param;
	PlayerType 	tmp_player_type;
	See 		tmp_see;
	SenseBody 	tmp_sense_body;
	Hear 		tmp_hear;
	Error 		tmp_error;
	Score 		tmp_score;
	Warning 	tmp_warning;
	Ok 			tmp_ok;
	ChgPlayerType tmp_chg_player_type;
%}

%code requires
{
/* The folling code is included at the beggining of the hh file */
	
	#include <string> 	
	#include "client_parser_types.h"  /* Containers for messages */
	
	namespace ClientParser /* It needs to know the Driver class */
	{
		class Driver; 
	}
	
}


%skeleton "lalr1.cc" 
%require "3.0"					/* The grammar is made to work on Bison 3.0 */
%language "C++"					/* The output will be a c++ class */
/*%debug							 Debug mode */
%locations 						/* Gives an interface to access location information */
%defines						/* */
%define parser_class_name {RcssParser} 	/* Name of the class generated by Bison */
	
%define api.token.constructor 	/* */
%define api.value.type variant	/* Use a variant-based interface instead of unions */
%define parse.assert			/* Enable assertions */

%param 	 						/* Param passed to parser constructor */
	{ ClientParser::Driver & driver }
		
/*%define parse.error verbose		 Enable verbose errors */

%define api.token.prefix {TOK_} /* Put a prefix on tokens' name to avoid name-crashing */


%token					END 0 				"end of file"

%token <std::string>	STRING 				"string"
%token <std::string> 	IDENTIFIER 			"identifier"
%token <double>			NUMBER 				"number"

%token 	UNKOWN

%token 	LP
%token 	RP

%token 	INIT
%token 	SERVER_PARAM
%token 	PLAYER_PARAM
%token 	PLAYER_TYPE
%token 	BODY
%token 	SEE
%token 	HEAR
%token 	SCORE
%token 	WARNING
%token 	ERROR
%token 	OK
%token 	CHANGE_PLAYER_TYPE

%token  RIGHT
%token 	LEFT

/* server_param tokens */
%token AUDIO_CUT_DIST 
%token AUTO_MODE 
%token BACK_DASH_RATE 
%token BACK_PASSES 
%token BALL_ACCEL_MAX 
%token BALL_DECAY 
%token BALL_RAND 
%token BALL_SIZE 
%token BALL_SPEED_MAX 
%token BALL_STUCK_AREA 
%token BALL_WEIGHT 
%token CATCH_BAN_CYCLE 
%token CATCH_PROBABILITY 
%token CATCHABLE_AREA_L 
%token CATCHABLE_AREA_W 
%token CKICK_MARGIN 
%token CLANG_ADVICE_WIN 
%token CLANG_DEFINE_WIN 
%token CLANG_DEL_WIN 
%token CLANG_INFO_WIN 
%token CLANG_MESS_DELAY 
%token CLANG_MESS_PER_CYCLE 
%token CLANG_META_WIN 
%token CLANG_RULE_WIN 
%token CLANG_WIN_SIZE 
%token COACH 
%token COACH_PORT 
%token COACH_W_REFEREE 
%token CONNECT_WAIT 
%token CONTROL_RADIUS 
%token DASH_ANGLE_STEP 
%token DASH_POWER_RATE 
%token DROP_BALL_TIME 
%token EFFORT_DEC 
%token EFFORT_DEC_THR 
%token EFFORT_INC 
%token EFFORT_INC_THR 
%token EFFORT_INIT 
%token EFFORT_MIN 
%token EXTRA_HALF_TIME 
%token EXTRA_STAMINA 
%token FORBID_KICK_OFF_OFFSIDE 
%token FOUL_CYCLES 
%token FOUL_DETECT_PROBABILITY 
%token FOUL_EXPONENT 
%token FREE_KICK_FAULTS 
%token FREEFORM_SEND_PERIOD 
%token FREEFORM_WAIT_PERIOD 
%token FULLSTATE_L 
%token FULLSTATE_R 
%token GAME_LOG_COMPRESSION 
%token GAME_LOG_DATED 
%token GAME_LOG_DIR 
%token GAME_LOG_FIXED 
%token GAME_LOG_FIXED_NAME 
%token GAME_LOG_VERSION 
%token GAME_LOGGING 
%token GAME_OVER_WAIT 
%token GOAL_WIDTH 
%token GOALIE_MAX_MOVES 
%token GOLDEN_GOAL 
%token HALF_TIME 
%token HEAR_DECAY 
%token HEAR_INC 
%token HEAR_MAX 
%token INERTIA_MOMENT 
%token KEEPAWAY 
%token KEEPAWAY_LENGTH 
%token KEEPAWAY_LOG_DATED 
%token KEEPAWAY_LOG_DIR 
%token KEEPAWAY_LOG_FIXED 
%token KEEPAWAY_LOG_FIXED_NAME 
%token KEEPAWAY_LOGGING 
%token KEEPAWAY_START 
%token KEEPAWAY_WIDTH 
%token KICK_OFF_WAIT 
%token KICK_POWER_RATE 
%token KICK_RAND 
%token KICK_RAND_FACTOR_L 
%token KICK_RAND_FACTOR_R 
%token KICKABLE_MARGIN 
%token LANDMARK_FILE 
%token LOG_DATE_FORMAT 
%token LOG_TIMES 
%token MAX_BACK_TACKLE_POWER 
%token MAX_DASH_ANGLE 
%token MAX_DASH_POWER 
%token MAX_GOAL_KICKS 
%token MAX_TACKLE_POWER 
%token MAXMOMENT 
%token MAXNECKANG 
%token MAXNECKMOMENT 
%token MAXPOWER 
%token MIN_DASH_ANGLE 
%token MIN_DASH_POWER 
%token MINMOMENT 
%token MINNECKANG 
%token MINNECKMOMENT 
%token MINPOWER 
%token NR_EXTRA_HALFS 
%token NR_NORMAL_HALFS 
%token OFFSIDE_ACTIVE_AREA_SIZE 
%token OFFSIDE_KICK_MARGIN 
%token OLCOACH_PORT 
%token OLD_COACH_HEAR 
%token PEN_ALLOW_MULT_KICKS 
%token PEN_BEFORE_SETUP_WAIT 
%token PEN_COACH_MOVES_PLAYERS 
%token PEN_DIST_X 
%token PEN_MAX_EXTRA_KICKS 
%token PEN_MAX_GOALIE_DIST_X 
%token PEN_NR_KICKS 
%token PEN_RANDOM_WINNER 
%token PEN_READY_WAIT 
%token PEN_SETUP_WAIT 
%token PEN_TAKEN_WAIT 
%token PENALTY_SHOOT_OUTS 
%token PLAYER_ACCEL_MAX 
%token PLAYER_DECAY 
%token PLAYER_RAND 
%token PLAYER_SIZE 
%token PLAYER_SPEED_MAX 
%token PLAYER_SPEED_MAX_MIN 
%token PLAYER_WEIGHT 
%token POINT_TO_BAN 
%token POINT_TO_DURATION 
%token PORT 
%token PRAND_FACTOR_L 
%token PRAND_FACTOR_R 
%token PROFILE 
%token PROPER_GOAL_KICKS 
%token QUANTIZE_STEP 
%token QUANTIZE_STEP_L 
%token RECORD_MESSAGES 
%token RECOVER_DEC 
%token RECOVER_DEC_THR 
%token RECOVER_INIT 
%token RECOVER_MIN 
%token RECV_STEP 
%token RED_CARD_PROBABILITY 
%token SAY_COACH_CNT_MAX 
%token SAY_COACH_MSG_SIZE 
%token SAY_MSG_SIZE 
%token SEND_COMMS 
%token SEND_STEP 
%token SEND_VI_STEP 
%token SENSE_BODY_STEP 
%token SIDE_DASH_RATE 
%token SIMULATOR_STEP 
%token SLOW_DOWN_FACTOR 
%token SLOWNESS_ON_TOP_FOR_LEFT_TEAM 
%token SLOWNESS_ON_TOP_FOR_RIGHT_TEAM 
%token STAMINA_CAPACITY 
%token STAMINA_INC_MAX 
%token STAMINA_MAX 
%token START_GOAL_L 
%token START_GOAL_R 
%token STOPPED_BALL_VEL 
%token SYNCH_MICRO_SLEEP 
%token SYNCH_MODE 
%token SYNCH_OFFSET 
%token SYNCH_SEE_OFFSET 
%token TACKLE_BACK_DIST 
%token TACKLE_CYCLES 
%token TACKLE_DIST 
%token TACKLE_EXPONENT 
%token TACKLE_POWER_RATE 
%token TACKLE_RAND_FACTOR 
%token TACKLE_WIDTH 
%token TEAM_ACTUATOR_NOISE 
%token TEAM_L_START 
%token TEAM_R_START 
%token TEXT_LOG_COMPRESSION 
%token TEXT_LOG_DATED 
%token TEXT_LOG_DIR 
%token TEXT_LOG_FIXED 
%token TEXT_LOG_FIXED_NAME 
%token TEXT_LOGGING 
%token USE_OFFSIDE 
%token VERBOSE 
%token VISIBLE_ANGLE 
%token VISIBLE_DISTANCE 
%token WIND_ANG 
%token WIND_DIR 
%token WIND_FORCE 
%token WIND_NONE 
%token WIND_RAND 
%token WIND_RANDOM 

/* player param tokens */
%token ALLOW_MULT_DEFAULT_TYPE 
%token CATCHABLE_AREA_L_STRETCH_MAX 
%token CATCHABLE_AREA_L_STRETCH_MIN 
%token DASH_POWER_RATE_DELTA_MAX 
%token DASH_POWER_RATE_DELTA_MIN 
%token EFFORT_MAX_DELTA_FACTOR 
%token EFFORT_MIN_DELTA_FACTOR 
%token EXTRA_STAMINA_DELTA_MAX 
%token EXTRA_STAMINA_DELTA_MIN 
%token FOUL_DETECT_PROBABILITY_DELTA_FACTOR 
%token INERTIA_MOMENT_DELTA_FACTOR 
%token KICK_POWER_RATE_DELTA_MAX 
%token KICK_POWER_RATE_DELTA_MIN 
%token KICK_RAND_DELTA_FACTOR 
%token KICKABLE_MARGIN_DELTA_MAX 
%token KICKABLE_MARGIN_DELTA_MIN 
%token NEW_DASH_POWER_RATE_DELTA_MAX 
%token NEW_DASH_POWER_RATE_DELTA_MIN 
%token NEW_STAMINA_INC_MAX_DELTA_FACTOR 
%token PLAYER_DECAY_DELTA_MAX 
%token PLAYER_DECAY_DELTA_MIN 
%token PLAYER_SIZE_DELTA_FACTOR 
%token PLAYER_SPEED_MAX_DELTA_MAX 
%token PLAYER_SPEED_MAX_DELTA_MIN 
%token PLAYER_TYPES 
%token PT_MAX 
%token RANDOM_SEED 
%token STAMINA_INC_MAX_DELTA_FACTOR 
%token SUBS_MAX 

/* Player type tokens */
%token CATCHABLE_AREA_L_STRETCH
%token EFFORT_MAX 
%token ID 

/*Already included within server_param tokens 
%token PLAYER_SPEED_MAX 
%token STAMINA_INC_MAX 
%token PLAYER_DECAY 
%token INERTIA_MOMENT 
%token DASH_POWER_RATE 
%token PLAYER_SIZE 
%token KICKABLE_MARGIN 
%token KICK_RAND 
%token EXTRA_STAMINA 
%token EFFORT_MIN 
%token KICK_POWER_RATE 
%token FOUL_DETECT_PROBABILITY 
 */

/***** PLAYMODES *****/
%token  BEFORE_KICK_OFF
%token  TIME_OVER
%token  PLAY_ON
%token  KICK_OFF_L
%token  KICK_OFF_R
%token  KICK_IN_L
%token  KICK_IN_R
%token  FREE_KICK_L
%token  FREE_KICK_R
%token  CORNER_KICK_L
%token  CORNER_KICK_R
%token  GOAL_KICK_L
%token  GOAL_KICK_R
%token  GOAL_L
%token  GOAL_R
%token  DROP_BALL
%token  OFFSIDE_L
%token  OFFSIDE_R
%token  PENALTY_KICK_L
%token  PENALTY_KICK_R
%token  FIRST_HALF_OVER
%token  PAUSE
%token  HUMAN_JUDGE
%token  FOUL_CHARGE_L
%token  FOUL_CHARGE_R
%token  FOUL_PUSH_L
%token  FOUL_PUSH_R
%token  FOUL_MULTIPLE_ATTACK_L
%token  FOUL_MULTIPLE_ATTACK_R
%token  FOUL_BALLOUT_L
%token  FOUL_BALLOUT_R
%token  BACK_PASS_L
%token  BACK_PASS_R
%token  FREE_KICK_FAULT_L
%token  FREE_KICK_FAULT_R
%token  CATCH_FAULT_L
%token  CATCH_FAULT_R
%token  INDIRECT_FREE_KICK_L
%token  INDIRECT_FREE_KICK_R
%token  PENALTY_SETUP_L
%token  PENALTY_SETUP_R
%token  PENALTY_READY_L
%token  PENALTY_READY_R
%token  PENALTY_TAKEN_L
%token  PENALTY_TAKEN_R
%token  PENALTY_MISS_L
%token  PENALTY_MISS_R
%token  PENALTY_SCORE_L
%token  PENALTY_SCORE_R

/* Visual information tokens*/
%token  FTL50
%token  FTL40
%token  FTL30
%token  FTL20
%token  FTL10
%token  FT0
%token  FTR10
%token  FTR20
%token  FTR30
%token  FTR40
%token  FTR50
%token  FRT30
%token  FRT20
%token  FRT10
%token  FR0
%token  FRB10
%token  FRB20
%token  FRB30
%token  FBR10
%token  FBR20
%token  FBR30
%token  FBR40
%token  FBR50
%token  FB0
%token  FBL10
%token  FBL20
%token  FBL30
%token  FBL40
%token  FBL50
%token  FLB30
%token  FLB20
%token  FLB10
%token  FL0
%token  FLT10
%token  FLT20
%token  FLT30
%token  FLT
%token  FCT
%token  FRT
%token  FGRT
%token  GR
%token  FGRB
%token  FRB
%token  FCB
%token  FLB
%token  FGLB
%token  GL
%token  FGLT
%token  FPLT
%token  FPRT
%token  FPRC
%token  FPRB
%token  FPLB
%token  FPLC
%token  FC
%token  FLAG_MAYUS
%token  GOAL_MAYUS

%token  LINE_TOP
%token  LINE_BOTTOM
%token  LINE_LEFT
%token  LINE_RIGHT

%token  BALL_CLOSE
%token  BALL_FAR

%token P
%token P_FAR
%token GOALIE

%token T
%token K

/* sense_body tokens */
%token  VIEW_MODE
%token  STAMINA
%token  SPEED
%token  HEAD_ANGLE
%token  KICK
%token  DASH
%token  TURN
%token  SAY
%token  TURN_NECK
%token  CATCH
%token  MOVE
%token  CHANGE_VIEW
%token  ARM
%token  FOCUS
%token  TACKLE
%token  COLLISION
%token  FOUL
%token  HIGH
%token  LOW
%token  NARROW
%token  NORMAL
%token  WIDE
%token  NONE
%token  MOVABLE
%token  EXPIRES
%token  TARGET
%token  COUNT
%token  BALL
%token  PLAYER
%token  POST
%token  CHARGED
%token 	CARD
%token  YELLOW
%token  RED

/* hear tokens */
%token  ONLINE_COACH_LEFT
%token  ONLINE_COACH_RIGHT
%token  OPP
%token  OUR
%token  REFEREE
%token  SELF

/* error tokens */
%token  CONNECTION_FAILED
%token  ILLEGAL_COMMAND_FORM
%token  ILLEGAL_TEAMNAME
%token  ILLEGAL_TEAMNAME_OR_TOO_LONG_TEAMNAME
%token  NO_MORE_TEAM
%token  NO_MORE_PLAYER_OR_GOALIE_OR_ILLEGAL_CLIENT_VERSION
%token  SOCKET_OPEN_FAILED
%token  ILLEGAL_CLIENT_VERSION
%token  NO_SUCH_TEAM_OR_PLAYER
%token  CANNOT_RECONNECT_WHILE_PLAYON

/* warning tokens */
%token NO_TEAM_FOUND
%token NO_SUCH_PLAYER
%token CANNOT_SUB_WHILE_PLAYON
%token NO_SUBS_LEFT
%token MAX_OF_THAT_TYPE_OF_FIELD
%token CANNOT_CHANGE_GOALIE
%token COMPRESSION_UNSUPPORTED
%token MESSAGE_NOT_NULL_TERMINATED

/* hearable playmode tokens */
%token <unsigned> GOAL_L_NUMBER
%token <unsigned> GOAL_R_NUMBER
%token TIME_UP
%token GOALIE_CATCH_BALL_L
%token GOALIE_CATCH_BALL_R
%token PENALTY_FOUL_R
%token PENALTY_FOUL_L
%token PENALTY_WINNER_L
%token PENALTY_WINNER_R
%token PENALTY_DRAW
%token <unsigned> YELLOW_CARD_L_NUMBER
%token <unsigned> YELLOW_CARD_R_NUMBER
%token <unsigned> RED_CARD_R_NUMBER
%token <unsigned> RED_CARD_L_NUMBER
%token PENALTY_ONFIELD_L
%token PENALTY_ONFIELD_R
%token FOUL_L
%token FOUL_R

/* Specify the types of nonterminal symbols */
/* The namespace must be included because the code generated 
 * by the next directives is placed into hh file, and we must not
 * use "using namespace ...".
 */ 
%type <ClientParser::Side>		side  
%type <ClientParser::Playmode> 	playmode 
%type <ClientParser::PlaymodeHearable> 	playmode_hearable 
%type <ClientParser::FlagId>		flag_id
%type <ClientParser::LineId>		line_id
%type <ClientParser::ViewQuality> view_qual
%type <ClientParser::ViewWidth> 	view_width
%type <ClientParser::FoulCard> 	card
%type <ClientParser::ObjectInfo>  object_info
%type <ClientParser::Flag> 		flag
%type <ClientParser::BallId> 		ball_id
%type <ClientParser::Ball> 		ball
%type <ClientParser::Line> 		line
%type <ClientParser::Player> 		player
%type <ClientParser::PlayerId>  	player_id
%type <ClientParser::ErrorType> 	error_type
%type <ClientParser::WarningType> warning_type

/* %printer 	{ yyoutput << $$; } <*>;*/ 

/* Specify the initial symbol */
%start input


/* FINALLY, THE GRAMMAR */
%%


input: 	/**/{}
		| input message { } 
;

message:  
	/* Call the respective driver funcion and resets the values of the message  class */
	  init 			{ driver.h_init			( tmp_init );  			tmp_init.reset(); }
	| server_param 	{ driver.h_server_param	( tmp_server_param ); 	tmp_server_param.reset(); }
	| player_param 	{ driver.h_player_param ( tmp_player_param ); 	tmp_player_param.reset(); }
	| player_type 	{ driver.h_player_type  ( tmp_player_type ); 	tmp_player_type.reset(); }
	| see 			{ driver.h_see 			( tmp_see ); 			tmp_see.reset(); }
	| sense_body 	{ driver.h_sense_body 	( tmp_sense_body );		tmp_sense_body.reset(); }
	| hear 			{ driver.h_hear 		( tmp_hear );  			tmp_hear.reset(); }
	| errorr 		{ driver.h_error 		( tmp_error ); 			tmp_error.reset(); }
	| score 		{ driver.h_score 		( tmp_score ); 			tmp_score.reset(); }
	| warning 		{ driver.h_warning 		( tmp_warning ); 		tmp_warning.reset(); }
	| ok 			{ driver.h_ok 			( tmp_ok ); 			tmp_ok.reset();}
	| change_player_type { driver.h_chg_player_type(tmp_chg_player_type); tmp_chg_player_type.reset(); }
;


/***********************************/
/************* GENERAL *************/
/***********************************/



/*****************************************************************************/
/***********************            INIT            **************************/
/*****************************************************************************/

init: LP INIT side NUMBER playmode RP 
	{ tmp_init.side = $3; tmp_init.unum = $4; tmp_init.playmode = $5; }
;

side:		LEFT 	{ $$ = SIDE_LEFT; }
		| 	RIGHT 	{ $$ = SIDE_RIGHT; }

;

playmode:	
	  BEFORE_KICK_OFF { $$ = PM_BEFORE_KICK_OFF; }
	| TIME_OVER { $$ = PM_TIME_OVER; }
	| PLAY_ON { $$ = PM_PLAY_ON; }
	| KICK_OFF_L { $$ = PM_KICK_OFF_L; }
	| KICK_OFF_R { $$ = PM_KICK_OFF_R; }
	| KICK_IN_L { $$ = PM_KICK_IN_L; }
	| KICK_IN_R { $$ = PM_KICK_IN_R; }
	| FREE_KICK_L { $$ = PM_FREE_KICK_L; }
	| FREE_KICK_R { $$ = PM_FREE_KICK_R; }
	| CORNER_KICK_L { $$ = PM_CORNER_KICK_L; }
	| CORNER_KICK_R { $$ = PM_CORNER_KICK_R; }
	| GOAL_KICK_L { $$ = PM_GOAL_KICK_L; }
	| GOAL_KICK_R { $$ = PM_GOAL_KICK_R; }
	| GOAL_L { $$ = PM_GOAL_L; }
	| GOAL_R { $$ = PM_GOAL_R; }
	| DROP_BALL { $$ = PM_DROP_BALL; }
	| OFFSIDE_L { $$ = PM_OFFSIDE_L; }
	| OFFSIDE_R { $$ = PM_OFFSIDE_R; }
	| PENALTY_KICK_L { $$ = PM_PENALTY_KICK_L; }
	| PENALTY_KICK_R { $$ = PM_PENALTY_KICK_R; }
	| FIRST_HALF_OVER { $$ = PM_FIRST_HALF_OVER; }
	| PAUSE { $$ = PM_PAUSE; }
	| HUMAN_JUDGE { $$ = PM_HUMAN_JUDGE; }
	| FOUL_CHARGE_L { $$ = PM_FOUL_CHARGE_L; }
	| FOUL_CHARGE_R { $$ = PM_FOUL_CHARGE_R; }
	| FOUL_PUSH_L { $$ = PM_FOUL_PUSH_L; }
	| FOUL_PUSH_R { $$ = PM_FOUL_PUSH_R; }
	| FOUL_MULTIPLE_ATTACK_L { $$ = PM_FOUL_MULTIPLE_ATTACK_L; }
	| FOUL_MULTIPLE_ATTACK_R { $$ = PM_FOUL_MULTIPLE_ATTACK_R; }
	| FOUL_BALLOUT_L { $$ = PM_FOUL_BALLOUT_L; }
	| FOUL_BALLOUT_R { $$ = PM_FOUL_BALLOUT_R; }
	| BACK_PASS_L { $$ = PM_BACK_PASS_L; }
	| BACK_PASS_R { $$ = PM_BACK_PASS_R; }
	| FREE_KICK_FAULT_L { $$ = PM_FREE_KICK_FAULT_L; }
	| FREE_KICK_FAULT_R { $$ = PM_FREE_KICK_FAULT_R; }
	| CATCH_FAULT_L { $$ = PM_CATCH_FAULT_L; }
	| CATCH_FAULT_R { $$ = PM_CATCH_FAULT_R; }
	| INDIRECT_FREE_KICK_L { $$ = PM_INDIRECT_FREE_KICK_L; }
	| INDIRECT_FREE_KICK_R { $$ = PM_INDIRECT_FREE_KICK_R; }
	| PENALTY_SETUP_L { $$ = PM_PENALTY_SETUP_L; }
	| PENALTY_SETUP_R { $$ = PM_PENALTY_SETUP_R; }
	| PENALTY_READY_L { $$ = PM_PENALTY_READY_L; }
	| PENALTY_READY_R { $$ = PM_PENALTY_READY_R; }
	| PENALTY_TAKEN_L { $$ = PM_PENALTY_TAKEN_L; }
	| PENALTY_TAKEN_R { $$ = PM_PENALTY_TAKEN_R; }
	| PENALTY_MISS_L { $$ = PM_PENALTY_MISS_L; }
	| PENALTY_MISS_R { $$ = PM_PENALTY_MISS_R; }
	| PENALTY_SCORE_L { $$ = PM_PENALTY_SCORE_L; }
	| PENALTY_SCORE_R { $$ = PM_PENALTY_SCORE_R; }
	  	
;


/*****************************************************************************/
/**********************         SERVER_PARAM            **********************/
/*****************************************************************************/

server_param: LP SERVER_PARAM serverps RP 
;

serverps: 	serverp_item
		 |	serverps serverp_item

serverp_item: LP AUDIO_CUT_DIST NUMBER  RP { tmp_server_param.audio_cut_dist = $3;  }
		| LP AUTO_MODE NUMBER  RP { tmp_server_param.auto_mode = $3;  }
		| LP BACK_DASH_RATE NUMBER  RP { tmp_server_param.back_dash_rate = $3;  }
		| LP BACK_PASSES NUMBER  RP { tmp_server_param.back_passes = $3;  }
		| LP BALL_ACCEL_MAX NUMBER  RP { tmp_server_param.ball_accel_max = $3;  }
		| LP BALL_DECAY NUMBER  RP { tmp_server_param.ball_decay = $3;  }
		| LP BALL_RAND NUMBER  RP { tmp_server_param.ball_rand = $3;  }
		| LP BALL_SIZE NUMBER  RP { tmp_server_param.ball_size = $3;  }
		| LP BALL_SPEED_MAX NUMBER  RP { tmp_server_param.ball_speed_max = $3;  }
		| LP BALL_STUCK_AREA NUMBER  RP { tmp_server_param.ball_stuck_area = $3;  }
		| LP BALL_WEIGHT NUMBER  RP { tmp_server_param.ball_weight = $3;  }
		| LP CATCH_BAN_CYCLE NUMBER  RP { tmp_server_param.catch_ban_cycle = $3;  }
		| LP CATCH_PROBABILITY NUMBER  RP { tmp_server_param.catch_probability = $3;  }
		| LP CATCHABLE_AREA_L NUMBER  RP { tmp_server_param.catchable_area_l = $3;  }
		| LP CATCHABLE_AREA_W NUMBER  RP { tmp_server_param.catchable_area_w = $3;  }
		| LP CKICK_MARGIN NUMBER  RP { tmp_server_param.ckick_margin = $3;  }
		| LP CLANG_ADVICE_WIN NUMBER  RP { tmp_server_param.clang_advice_win = $3;  }
		| LP CLANG_DEFINE_WIN NUMBER  RP { tmp_server_param.clang_define_win = $3;  }
		| LP CLANG_DEL_WIN NUMBER  RP { tmp_server_param.clang_del_win = $3;  }
		| LP CLANG_INFO_WIN NUMBER  RP { tmp_server_param.clang_info_win = $3;  }
		| LP CLANG_MESS_DELAY NUMBER  RP { tmp_server_param.clang_mess_delay = $3;  }
		| LP CLANG_MESS_PER_CYCLE NUMBER  RP { tmp_server_param.clang_mess_per_cycle = $3;  }
		| LP CLANG_META_WIN NUMBER  RP { tmp_server_param.clang_meta_win = $3;  }
		| LP CLANG_RULE_WIN NUMBER  RP { tmp_server_param.clang_rule_win = $3;  }
		| LP CLANG_WIN_SIZE NUMBER  RP { tmp_server_param.clang_win_size = $3;  }
		| LP COACH NUMBER  RP { tmp_server_param.coach = $3;  }
		| LP COACH_PORT NUMBER  RP { tmp_server_param.coach_port = $3;  }
		| LP COACH_W_REFEREE NUMBER  RP { tmp_server_param.coach_w_referee = $3;  }
		| LP CONNECT_WAIT NUMBER  RP { tmp_server_param.connect_wait = $3;  }
		| LP CONTROL_RADIUS NUMBER  RP { tmp_server_param.control_radius = $3;  }
		| LP DASH_ANGLE_STEP NUMBER  RP { tmp_server_param.dash_angle_step = $3;  }
		| LP DASH_POWER_RATE NUMBER  RP { tmp_server_param.dash_power_rate = $3;  }
		| LP DROP_BALL_TIME NUMBER  RP { tmp_server_param.drop_ball_time = $3;  }
		| LP EFFORT_DEC NUMBER  RP { tmp_server_param.effort_dec = $3;  }
		| LP EFFORT_DEC_THR NUMBER  RP { tmp_server_param.effort_dec_thr = $3;  }
		| LP EFFORT_INC NUMBER  RP { tmp_server_param.effort_inc = $3;  }
		| LP EFFORT_INC_THR NUMBER  RP { tmp_server_param.effort_inc_thr = $3;  }
		| LP EFFORT_INIT NUMBER  RP { tmp_server_param.effort_init = $3;  }
		| LP EFFORT_MIN NUMBER  RP { tmp_server_param.effort_min = $3;  }
		| LP EXTRA_HALF_TIME NUMBER  RP { tmp_server_param.extra_half_time = $3;  }
		| LP EXTRA_STAMINA NUMBER  RP { tmp_server_param.extra_stamina = $3;  }
		| LP FORBID_KICK_OFF_OFFSIDE NUMBER  RP { tmp_server_param.forbid_kick_off_offside = $3;  }
		| LP FOUL_CYCLES NUMBER  RP { tmp_server_param.foul_cycles = $3;  }
		| LP FOUL_DETECT_PROBABILITY NUMBER  RP { tmp_server_param.foul_detect_probability = $3;  }
		| LP FOUL_EXPONENT NUMBER  RP { tmp_server_param.foul_exponent = $3;  }
		| LP FREE_KICK_FAULTS NUMBER  RP { tmp_server_param.free_kick_faults = $3;  }
		| LP FREEFORM_SEND_PERIOD NUMBER  RP { tmp_server_param.freeform_send_period = $3;  }
		| LP FREEFORM_WAIT_PERIOD NUMBER  RP { tmp_server_param.freeform_wait_period = $3;  }
		| LP FULLSTATE_L NUMBER  RP { tmp_server_param.fullstate_l = $3;  }
		| LP FULLSTATE_R NUMBER  RP { tmp_server_param.fullstate_r = $3;  }
		| LP GAME_LOG_COMPRESSION NUMBER  RP { tmp_server_param.game_log_compression = $3;  }
		| LP GAME_LOG_DATED NUMBER  RP { tmp_server_param.game_log_dated = $3;  }
		| LP GAME_LOG_DIR STRING  RP { tmp_server_param.game_log_dir = $3;  }
		| LP GAME_LOG_FIXED NUMBER  RP { tmp_server_param.game_log_fixed = $3;  }
		| LP GAME_LOG_FIXED_NAME STRING  RP { tmp_server_param.game_log_fixed_name = $3;  }
		| LP GAME_LOG_VERSION NUMBER  RP { tmp_server_param.game_log_version = $3;  }
		| LP GAME_LOGGING NUMBER  RP { tmp_server_param.game_logging = $3;  }
		| LP GAME_OVER_WAIT NUMBER  RP { tmp_server_param.game_over_wait = $3;  }
		| LP GOAL_WIDTH NUMBER  RP { tmp_server_param.goal_width = $3;  }
		| LP GOALIE_MAX_MOVES NUMBER  RP { tmp_server_param.goalie_max_moves = $3;  }
		| LP GOLDEN_GOAL NUMBER  RP { tmp_server_param.golden_goal = $3;  }
		| LP HALF_TIME NUMBER  RP { tmp_server_param.half_time = $3;  }
		| LP HEAR_DECAY NUMBER  RP { tmp_server_param.hear_decay = $3;  }
		| LP HEAR_INC NUMBER  RP { tmp_server_param.hear_inc = $3;  }
		| LP HEAR_MAX NUMBER  RP { tmp_server_param.hear_max = $3;  }
		| LP INERTIA_MOMENT NUMBER  RP { tmp_server_param.inertia_moment = $3;  }
		| LP KEEPAWAY NUMBER  RP { tmp_server_param.keepaway = $3;  }
		| LP KEEPAWAY_LENGTH NUMBER  RP { tmp_server_param.keepaway_length = $3;  }
		| LP KEEPAWAY_LOG_DATED NUMBER  RP { tmp_server_param.keepaway_log_dated = $3;  }
		| LP KEEPAWAY_LOG_DIR STRING  RP { tmp_server_param.keepaway_log_dir = $3;  }
		| LP KEEPAWAY_LOG_FIXED NUMBER  RP { tmp_server_param.keepaway_log_fixed = $3;  }
		| LP KEEPAWAY_LOG_FIXED_NAME STRING  RP { tmp_server_param.keepaway_log_fixed_name = $3;  }
		| LP KEEPAWAY_LOGGING NUMBER  RP { tmp_server_param.keepaway_logging = $3;  }
		| LP KEEPAWAY_START NUMBER  RP { tmp_server_param.keepaway_start = $3;  }
		| LP KEEPAWAY_WIDTH NUMBER  RP { tmp_server_param.keepaway_width = $3;  }
		| LP KICK_OFF_WAIT NUMBER  RP { tmp_server_param.kick_off_wait = $3;  }
		| LP KICK_POWER_RATE NUMBER  RP { tmp_server_param.kick_power_rate = $3;  }
		| LP KICK_RAND NUMBER  RP { tmp_server_param.kick_rand = $3;  }
		| LP KICK_RAND_FACTOR_L NUMBER  RP { tmp_server_param.kick_rand_factor_l = $3;  }
		| LP KICK_RAND_FACTOR_R NUMBER  RP { tmp_server_param.kick_rand_factor_r = $3;  }
		| LP KICKABLE_MARGIN NUMBER  RP { tmp_server_param.kickable_margin = $3;  }
		| LP LANDMARK_FILE STRING  RP { tmp_server_param.landmark_file = $3;  }
		| LP LOG_DATE_FORMAT STRING  RP { tmp_server_param.log_date_format = $3;  }
		| LP LOG_TIMES NUMBER  RP { tmp_server_param.log_times = $3;  }
		| LP MAX_BACK_TACKLE_POWER NUMBER  RP { tmp_server_param.max_back_tackle_power = $3;  }
		| LP MAX_DASH_ANGLE NUMBER  RP { tmp_server_param.max_dash_angle = $3;  }
		| LP MAX_DASH_POWER NUMBER  RP { tmp_server_param.max_dash_power = $3;  }
		| LP MAX_GOAL_KICKS NUMBER  RP { tmp_server_param.max_goal_kicks = $3;  }
		| LP MAX_TACKLE_POWER NUMBER  RP { tmp_server_param.max_tackle_power = $3;  }
		| LP MAXMOMENT NUMBER  RP { tmp_server_param.maxmoment = $3;  }
		| LP MAXNECKANG NUMBER  RP { tmp_server_param.maxneckang = $3;  }
		| LP MAXNECKMOMENT NUMBER  RP { tmp_server_param.maxneckmoment = $3;  }
		| LP MAXPOWER NUMBER  RP { tmp_server_param.maxpower = $3;  }
		| LP MIN_DASH_ANGLE NUMBER  RP { tmp_server_param.min_dash_angle = $3;  }
		| LP MIN_DASH_POWER NUMBER  RP { tmp_server_param.min_dash_power = $3;  }
		| LP MINMOMENT NUMBER  RP { tmp_server_param.minmoment = $3;  }
		| LP MINNECKANG NUMBER  RP { tmp_server_param.minneckang = $3;  }
		| LP MINNECKMOMENT NUMBER  RP { tmp_server_param.minneckmoment = $3;  }
		| LP MINPOWER NUMBER  RP { tmp_server_param.minpower = $3;  }
		| LP NR_EXTRA_HALFS NUMBER  RP { tmp_server_param.nr_extra_halfs = $3;  }
		| LP NR_NORMAL_HALFS NUMBER  RP { tmp_server_param.nr_normal_halfs = $3;  }
		| LP OFFSIDE_ACTIVE_AREA_SIZE NUMBER  RP { tmp_server_param.offside_active_area_size = $3;  }
		| LP OFFSIDE_KICK_MARGIN NUMBER  RP { tmp_server_param.offside_kick_margin = $3;  }
		| LP OLCOACH_PORT NUMBER  RP { tmp_server_param.olcoach_port = $3;  }
		| LP OLD_COACH_HEAR NUMBER  RP { tmp_server_param.old_coach_hear = $3;  }
		| LP PEN_ALLOW_MULT_KICKS NUMBER  RP { tmp_server_param.pen_allow_mult_kicks = $3;  }
		| LP PEN_BEFORE_SETUP_WAIT NUMBER  RP { tmp_server_param.pen_before_setup_wait = $3;  }
		| LP PEN_COACH_MOVES_PLAYERS NUMBER  RP { tmp_server_param.pen_coach_moves_players = $3;  }
		| LP PEN_DIST_X NUMBER  RP { tmp_server_param.pen_dist_x = $3;  }
		| LP PEN_MAX_EXTRA_KICKS NUMBER  RP { tmp_server_param.pen_max_extra_kicks = $3;  }
		| LP PEN_MAX_GOALIE_DIST_X NUMBER  RP { tmp_server_param.pen_max_goalie_dist_x = $3;  }
		| LP PEN_NR_KICKS NUMBER  RP { tmp_server_param.pen_nr_kicks = $3;  }
		| LP PEN_RANDOM_WINNER NUMBER  RP { tmp_server_param.pen_random_winner = $3;  }
		| LP PEN_READY_WAIT NUMBER  RP { tmp_server_param.pen_ready_wait = $3;  }
		| LP PEN_SETUP_WAIT NUMBER  RP { tmp_server_param.pen_setup_wait = $3;  }
		| LP PEN_TAKEN_WAIT NUMBER  RP { tmp_server_param.pen_taken_wait = $3;  }
		| LP PENALTY_SHOOT_OUTS NUMBER  RP { tmp_server_param.penalty_shoot_outs = $3;  }
		| LP PLAYER_ACCEL_MAX NUMBER  RP { tmp_server_param.player_accel_max = $3;  }
		| LP PLAYER_DECAY NUMBER  RP { tmp_server_param.player_decay = $3;  }
		| LP PLAYER_RAND NUMBER  RP { tmp_server_param.player_rand = $3;  }
		| LP PLAYER_SIZE NUMBER  RP { tmp_server_param.player_size = $3;  }
		| LP PLAYER_SPEED_MAX NUMBER  RP { tmp_server_param.player_speed_max = $3;  }
		| LP PLAYER_SPEED_MAX_MIN NUMBER  RP { tmp_server_param.player_speed_max_min = $3;  }
		| LP PLAYER_WEIGHT NUMBER  RP { tmp_server_param.player_weight = $3;  }
		| LP POINT_TO_BAN NUMBER  RP { tmp_server_param.point_to_ban = $3;  }
		| LP POINT_TO_DURATION NUMBER  RP { tmp_server_param.point_to_duration = $3;  }
		| LP PORT NUMBER  RP { tmp_server_param.port = $3;  }
		| LP PRAND_FACTOR_L NUMBER  RP { tmp_server_param.prand_factor_l = $3;  }
		| LP PRAND_FACTOR_R NUMBER  RP { tmp_server_param.prand_factor_r = $3;  }
		| LP PROFILE NUMBER  RP { tmp_server_param.profile = $3;  }
		| LP PROPER_GOAL_KICKS NUMBER  RP { tmp_server_param.proper_goal_kicks = $3;  }
		| LP QUANTIZE_STEP NUMBER  RP { tmp_server_param.quantize_step = $3;  }
		| LP QUANTIZE_STEP_L NUMBER  RP { tmp_server_param.quantize_step_l = $3;  }
		| LP RECORD_MESSAGES NUMBER  RP { tmp_server_param.record_messages = $3;  }
		| LP RECOVER_DEC NUMBER  RP { tmp_server_param.recover_dec = $3;  }
		| LP RECOVER_DEC_THR NUMBER  RP { tmp_server_param.recover_dec_thr = $3;  }
		| LP RECOVER_INIT NUMBER  RP { tmp_server_param.recover_init = $3;  }
		| LP RECOVER_MIN NUMBER  RP { tmp_server_param.recover_min = $3;  }
		| LP RECV_STEP NUMBER  RP { tmp_server_param.recv_step = $3;  }
		| LP RED_CARD_PROBABILITY NUMBER  RP { tmp_server_param.red_card_probability = $3;  }
		| LP SAY_COACH_CNT_MAX NUMBER  RP { tmp_server_param.say_coach_cnt_max = $3;  }
		| LP SAY_COACH_MSG_SIZE NUMBER  RP { tmp_server_param.say_coach_msg_size = $3;  }
		| LP SAY_MSG_SIZE NUMBER  RP { tmp_server_param.say_msg_size = $3;  }
		| LP SEND_COMMS NUMBER  RP { tmp_server_param.send_comms = $3;  }
		| LP SEND_STEP NUMBER  RP { tmp_server_param.send_step = $3;  }
		| LP SEND_VI_STEP NUMBER  RP { tmp_server_param.send_vi_step = $3;  }
		| LP SENSE_BODY_STEP NUMBER  RP { tmp_server_param.sense_body_step = $3;  }
		| LP SIDE_DASH_RATE NUMBER  RP { tmp_server_param.side_dash_rate = $3;  }
		| LP SIMULATOR_STEP NUMBER  RP { tmp_server_param.simulator_step = $3;  }
		| LP SLOW_DOWN_FACTOR NUMBER  RP { tmp_server_param.slow_down_factor = $3;  }
		| LP SLOWNESS_ON_TOP_FOR_LEFT_TEAM NUMBER  RP { tmp_server_param.slowness_on_top_for_left_team = $3;  }
		| LP SLOWNESS_ON_TOP_FOR_RIGHT_TEAM NUMBER  RP { tmp_server_param.slowness_on_top_for_right_team = $3;  }
		| LP STAMINA_CAPACITY NUMBER  RP { tmp_server_param.stamina_capacity = $3;  }
		| LP STAMINA_INC_MAX NUMBER  RP { tmp_server_param.stamina_inc_max = $3;  }
		| LP STAMINA_MAX NUMBER  RP { tmp_server_param.stamina_max = $3;  }
		| LP START_GOAL_L NUMBER  RP { tmp_server_param.start_goal_l = $3;  }
		| LP START_GOAL_R NUMBER  RP { tmp_server_param.start_goal_r = $3;  }
		| LP STOPPED_BALL_VEL NUMBER  RP { tmp_server_param.stopped_ball_vel = $3;  }
		| LP SYNCH_MICRO_SLEEP NUMBER  RP { tmp_server_param.synch_micro_sleep = $3;  }
		| LP SYNCH_MODE NUMBER  RP { tmp_server_param.synch_mode = $3;  }
		| LP SYNCH_OFFSET NUMBER  RP { tmp_server_param.synch_offset = $3;  }
		| LP SYNCH_SEE_OFFSET NUMBER  RP { tmp_server_param.synch_see_offset = $3;  }
		| LP TACKLE_BACK_DIST NUMBER  RP { tmp_server_param.tackle_back_dist = $3;  }
		| LP TACKLE_CYCLES NUMBER  RP { tmp_server_param.tackle_cycles = $3;  }
		| LP TACKLE_DIST NUMBER  RP { tmp_server_param.tackle_dist = $3;  }
		| LP TACKLE_EXPONENT NUMBER  RP { tmp_server_param.tackle_exponent = $3;  }
		| LP TACKLE_POWER_RATE NUMBER  RP { tmp_server_param.tackle_power_rate = $3;  }
		| LP TACKLE_RAND_FACTOR NUMBER  RP { tmp_server_param.tackle_rand_factor = $3;  }
		| LP TACKLE_WIDTH NUMBER  RP { tmp_server_param.tackle_width = $3;  }
		| LP TEAM_ACTUATOR_NOISE NUMBER  RP { tmp_server_param.team_actuator_noise = $3;  }
		| LP TEAM_L_START STRING  RP { tmp_server_param.team_l_start = $3;  }
		| LP TEAM_R_START STRING  RP { tmp_server_param.team_r_start = $3;  }
		| LP TEXT_LOG_COMPRESSION NUMBER  RP { tmp_server_param.text_log_compression = $3;  }
		| LP TEXT_LOG_DATED NUMBER  RP { tmp_server_param.text_log_dated = $3;  }
		| LP TEXT_LOG_DIR STRING  RP { tmp_server_param.text_log_dir = $3;  }
		| LP TEXT_LOG_FIXED NUMBER  RP { tmp_server_param.text_log_fixed = $3;  }
		| LP TEXT_LOG_FIXED_NAME STRING  RP { tmp_server_param.text_log_fixed_name = $3;  }
		| LP TEXT_LOGGING NUMBER  RP { tmp_server_param.text_logging = $3;  }
		| LP USE_OFFSIDE NUMBER  RP { tmp_server_param.use_offside = $3;  }
		| LP VERBOSE NUMBER  RP { tmp_server_param.verbose = $3;  }
		| LP VISIBLE_ANGLE NUMBER  RP { tmp_server_param.visible_angle = $3;  }
		| LP VISIBLE_DISTANCE NUMBER  RP { tmp_server_param.visible_distance = $3;  }
		| LP WIND_ANG NUMBER  RP { tmp_server_param.wind_ang = $3;  }
		| LP WIND_DIR NUMBER  RP { tmp_server_param.wind_dir = $3;  }
		| LP WIND_FORCE NUMBER  RP { tmp_server_param.wind_force = $3;  }
		| LP WIND_NONE NUMBER  RP { tmp_server_param.wind_none = $3;  }
		| LP WIND_RAND NUMBER  RP { tmp_server_param.wind_rand = $3;  }
		| LP WIND_RANDOM NUMBER  RP { tmp_server_param.wind_random = $3;  }
		| LP IDENTIFIER NUMBER RP { std::cout << "Unknown server parameter '" << $2 << "'" << std::endl; }
		| LP IDENTIFIER STRING RP { std::cout << "Unknown server parameter '" << $2 << "'" << std::endl; }
		| LP IDENTIFIER IDENTIFIER RP { std::cout << "Unknown server parameter '" << $2 << "'" << std::endl; }
;

/*****************************************************************************/
/**********************         PLAYER_PARAM            **********************/
/*****************************************************************************/

player_param: LP PLAYER_PARAM playerps RP {}
;

playerps: playerps_item
		| playerps playerps_item
;

playerps_item:  
	LP ALLOW_MULT_DEFAULT_TYPE NUMBER  RP { tmp_player_param.allow_mult_default_type = $3;  }
	| LP CATCHABLE_AREA_L_STRETCH_MAX NUMBER  RP { tmp_player_param.catchable_area_l_stretch_max = $3;  }
	| LP CATCHABLE_AREA_L_STRETCH_MIN NUMBER  RP { tmp_player_param.catchable_area_l_stretch_min = $3;  }
	| LP DASH_POWER_RATE_DELTA_MAX NUMBER  RP { tmp_player_param.dash_power_rate_delta_max = $3;  }
	| LP DASH_POWER_RATE_DELTA_MIN NUMBER  RP { tmp_player_param.dash_power_rate_delta_min = $3;  }
	| LP EFFORT_MAX_DELTA_FACTOR NUMBER  RP { tmp_player_param.effort_max_delta_factor = $3;  }
	| LP EFFORT_MIN_DELTA_FACTOR NUMBER  RP { tmp_player_param.effort_min_delta_factor = $3;  }
	| LP EXTRA_STAMINA_DELTA_MAX NUMBER  RP { tmp_player_param.extra_stamina_delta_max = $3;  }
	| LP EXTRA_STAMINA_DELTA_MIN NUMBER  RP { tmp_player_param.extra_stamina_delta_min = $3;  }
	| LP FOUL_DETECT_PROBABILITY_DELTA_FACTOR NUMBER  RP { tmp_player_param.foul_detect_probability_delta_factor = $3;  }
	| LP INERTIA_MOMENT_DELTA_FACTOR NUMBER  RP { tmp_player_param.inertia_moment_delta_factor = $3;  }
	| LP KICK_POWER_RATE_DELTA_MAX NUMBER  RP { tmp_player_param.kick_power_rate_delta_max = $3;  }
	| LP KICK_POWER_RATE_DELTA_MIN NUMBER  RP { tmp_player_param.kick_power_rate_delta_min = $3;  }
	| LP KICK_RAND_DELTA_FACTOR NUMBER  RP { tmp_player_param.kick_rand_delta_factor = $3;  }
	| LP KICKABLE_MARGIN_DELTA_MAX NUMBER  RP { tmp_player_param.kickable_margin_delta_max = $3;  }
	| LP KICKABLE_MARGIN_DELTA_MIN NUMBER  RP { tmp_player_param.kickable_margin_delta_min = $3;  }
	| LP NEW_DASH_POWER_RATE_DELTA_MAX NUMBER  RP { tmp_player_param.new_dash_power_rate_delta_max = $3;  }
	| LP NEW_DASH_POWER_RATE_DELTA_MIN NUMBER  RP { tmp_player_param.new_dash_power_rate_delta_min = $3;  }
	| LP NEW_STAMINA_INC_MAX_DELTA_FACTOR NUMBER  RP { tmp_player_param.new_stamina_inc_max_delta_factor = $3;  }
	| LP PLAYER_DECAY_DELTA_MAX NUMBER  RP { tmp_player_param.player_decay_delta_max = $3;  }
	| LP PLAYER_DECAY_DELTA_MIN NUMBER  RP { tmp_player_param.player_decay_delta_min = $3;  }
	| LP PLAYER_SIZE_DELTA_FACTOR NUMBER  RP { tmp_player_param.player_size_delta_factor = $3;  }
	| LP PLAYER_SPEED_MAX_DELTA_MAX NUMBER  RP { tmp_player_param.player_speed_max_delta_max = $3;  }
	| LP PLAYER_SPEED_MAX_DELTA_MIN NUMBER  RP { tmp_player_param.player_speed_max_delta_min = $3;  }
	| LP PLAYER_TYPES NUMBER  RP { tmp_player_param.player_types = $3;  }
	| LP PT_MAX NUMBER  RP { tmp_player_param.pt_max = $3;  }
	| LP RANDOM_SEED NUMBER  RP { tmp_player_param.random_seed = $3;  }
	| LP STAMINA_INC_MAX_DELTA_FACTOR NUMBER  RP { tmp_player_param.stamina_inc_max_delta_factor = $3;  }
	| LP SUBS_MAX NUMBER  RP { tmp_player_param.subs_max = $3;  }
	| LP IDENTIFIER NUMBER RP { std::cout << "Unknown player parameter '" << $2 << "'" << std::endl; }
	| LP IDENTIFIER STRING RP { std::cout << "Unknown player parameter '" << $2 << "'" << std::endl; }
	| LP IDENTIFIER IDENTIFIER RP { std::cout << "Unknown player parameter '" << $2 << "'" << std::endl; }

;

/*****************************************************************************/
/***********************         PLAYER_TYPE            **********************/
/*****************************************************************************/


player_type: LP PLAYER_TYPE playerts  RP {}
;

playerts: playerts_item
		| playerts playerts_item
;

playerts_item: 
	LP ID NUMBER  RP { tmp_player_type.id = $3;  }
	| LP PLAYER_SPEED_MAX NUMBER  RP { tmp_player_type.player_speed_max = $3;  }
	| LP STAMINA_INC_MAX NUMBER  RP { tmp_player_type.stamina_inc_max = $3;  }
	| LP PLAYER_DECAY NUMBER  RP { tmp_player_type.player_decay = $3;  }
	| LP INERTIA_MOMENT NUMBER  RP { tmp_player_type.inertia_moment = $3;  }
	| LP DASH_POWER_RATE NUMBER  RP { tmp_player_type.dash_power_rate = $3;  }
	| LP PLAYER_SIZE NUMBER  RP { tmp_player_type.player_size = $3;  }
	| LP KICKABLE_MARGIN NUMBER  RP { tmp_player_type.kickable_margin = $3;  }
	| LP KICK_RAND NUMBER  RP { tmp_player_type.kick_rand = $3;  }
	| LP EXTRA_STAMINA NUMBER  RP { tmp_player_type.extra_stamina = $3;  }
	| LP EFFORT_MAX NUMBER  RP { tmp_player_type.effort_max = $3;  }
	| LP EFFORT_MIN NUMBER  RP { tmp_player_type.effort_min = $3;  }
	| LP KICK_POWER_RATE NUMBER  RP { tmp_player_type.kick_power_rate = $3;  }
	| LP FOUL_DETECT_PROBABILITY NUMBER  RP { tmp_player_type.foul_detect_probability = $3;  }
	| LP CATCHABLE_AREA_L_STRETCH NUMBER  RP { tmp_player_type.catchable_area_l_stretch = $3;  }
	| LP IDENTIFIER NUMBER RP { std::cout << "Unknown player_type parameter '" << $2 << "'" << std::endl; }
	| LP IDENTIFIER STRING RP { std::cout << "Unknown player_type parameter '" << $2 << "'" << std::endl; }
	| LP IDENTIFIER IDENTIFIER RP { std::cout << "Unknown player_type parameter '" << $2 << "'" << std::endl; }



/*****************************************************************************/
/************************            SEE            **************************/
/*****************************************************************************/


see: LP SEE NUMBER see_items RP { tmp_see.time = $3; }
	| LP SEE NUMBER RP { tmp_see.time = $3; } 

;

see_items: 
	 see_item
	| see_items see_item
;

see_item: 
	LP player RP
	{
		tmp_see.players.push_back( $2 );
	}
	| LP flag RP
	{
		tmp_see.flags.push_back( $2 );
	}
	| LP ball RP
	{
		tmp_see.balls.push_back( $2 );
	}
	| LP line RP
	{
		tmp_see.lines.push_back( $2 );
	}
;

flag: 
	flag_id object_info
	{
		$$.id = $1;
		$$.setObjectInfo( $2 );
	}
;

flag_id: 
	FTL50 { $$ = FLAG_FTL50; }
	| FTL40 { $$ = FLAG_FTL40; }
	| FTL30 { $$ = FLAG_FTL30; }
	| FTL20 { $$ = FLAG_FTL20; }
	| FTL10 { $$ = FLAG_FTL10; }
	| FT0 { $$ = FLAG_FT0; }
	| FTR10 { $$ = FLAG_FTR10; }
	| FTR20 { $$ = FLAG_FTR20; }
	| FTR30 { $$ = FLAG_FTR30; }
	| FTR40 { $$ = FLAG_FTR40; }
	| FTR50 { $$ = FLAG_FTR50; }
	| FRT30 { $$ = FLAG_FRT30; }
	| FRT20 { $$ = FLAG_FRT20; }
	| FRT10 { $$ = FLAG_FRT10; }
	| FR0 { $$ = FLAG_FR0; }
	| FRB10 { $$ = FLAG_FRB10; }
	| FRB20 { $$ = FLAG_FRB20; }
	| FRB30 { $$ = FLAG_FRB30; }
	| FBR10 { $$ = FLAG_FBR10; }
	| FBR20 { $$ = FLAG_FBR20; }
	| FBR30 { $$ = FLAG_FBR30; }
	| FBR40 { $$ = FLAG_FBR40; }
	| FBR50 { $$ = FLAG_FBR50; }
	| FB0 { $$ = FLAG_FB0; }
	| FBL10 { $$ = FLAG_FBL10; }
	| FBL20 { $$ = FLAG_FBL20; }
	| FBL30 { $$ = FLAG_FBL30; }
	| FBL40 { $$ = FLAG_FBL40; }
	| FBL50 { $$ = FLAG_FBL50; }
	| FLB30 { $$ = FLAG_FLB30; }
	| FLB20 { $$ = FLAG_FLB20; }
	| FLB10 { $$ = FLAG_FLB10; }
	| FL0 { $$ = FLAG_FL0; }
	| FLT10 { $$ = FLAG_FLT10; }
	| FLT20 { $$ = FLAG_FLT20; }
	| FLT30 { $$ = FLAG_FLT30; }
	| FLT { $$ = FLAG_FLT; }
	| FCT { $$ = FLAG_FCT; }
	| FRT { $$ = FLAG_FRT; }
	| FGRT { $$ = FLAG_FGRT; }
	| GR { $$ = FLAG_GR; }
	| FGRB { $$ = FLAG_FGRB; }
	| FRB { $$ = FLAG_FRB; }
	| FCB { $$ = FLAG_FCB; }
	| FLB { $$ = FLAG_FLB; }
	| FGLB { $$ = FLAG_FGLB; }
	| GL { $$ = FLAG_GL; }
	| FGLT { $$ = FLAG_FGLT; }
	| FPLT { $$ = FLAG_FPLT; }
	| FPRT { $$ = FLAG_FPRT; }
	| FPRC { $$ = FLAG_FPRC; }
	| FPRB { $$ = FLAG_FPRB; }
	| FPLB { $$ = FLAG_FPLB; }
	| FPLC { $$ = FLAG_FPLC; }
	| FC { $$ = FLAG_FC; }
	| FLAG_MAYUS { $$ = FLAG_MAYUS; }
	| GOAL_MAYUS { $$ = GOAL_MAYUS; }


;

line: 	
	line_id object_info
	{
		$$.id = $1;
		$$.setObjectInfo( $2 );
	}
;

line_id: 
	LINE_TOP { $$ = LINE_TOP; }
	| LINE_BOTTOM { $$ = LINE_BOTTOM; }
	| LINE_LEFT { $$ = LINE_LEFT; }
	| LINE_RIGHT { $$ = LINE_RIGHT; }
;

ball: 
	ball_id object_info
	{

		$$.setBallId( $1 );
		$$.setObjectInfo( $2 );
	}
;


ball_id: 
	BALL_CLOSE 
	{
		$$.mayus_form = false;
	}
	| BALL_FAR
	{
		$$.mayus_form = true;
	}
;

player: 
	player_id object_info 
	{
		$$.setPlayerId		( $1 );
		$$.setObjectInfo	( $2 );
	}
;	

player_id: 
	LP P RP 	
	{
		$$.mayus_form = false;
	}
	| LP P STRING RP 
	{
		$$.team_name = $3;
	}
	| LP P STRING NUMBER RP {}
	{
		$$.team_name = $3;
		$$.unum = $4;
	}
	| LP P STRING NUMBER GOALIE RP 
	{
		$$.team_name = $3;
		$$.unum = $4;
		$$.goalie = true;
	}
	| P_FAR 
	{
		$$.mayus_form = true;
	} 
;

object_info: 
	NUMBER 	/* direction */ 
	{
		$$.direction = $1;
	}
	| NUMBER NUMBER /* distance direction*/
	{
		$$.distance = $1;
		$$.direction = $2;
	}
	| NUMBER NUMBER NUMBER /* distance direction point_dir */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.pointing_dir = $3;	
	}
	| NUMBER NUMBER T /* distance direction tackle */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.tackle = true;
	}
	| NUMBER NUMBER K /* distance direction kick */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.kick = true;
	}
	| NUMBER NUMBER NUMBER T /* distance direction point_dir */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.pointing_dir = $3;	
		$$.tackle = true;
	}
	| NUMBER NUMBER NUMBER K/* distance direction point_dir */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.pointing_dir = $3;	
		$$.kick = true;
	}

	| NUMBER NUMBER NUMBER NUMBER  /* distance direction dist_chg dir_chg */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.dist_change = $3;
		$$.dir_change = $4;
	}
	| NUMBER NUMBER NUMBER NUMBER NUMBER /* distance direction dis_chg dir_chg body_dir */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.dist_change = $3;
		$$.dir_change = $4;
		$$.body_facing_dir = $5;
	}
	| NUMBER NUMBER NUMBER NUMBER T /* distance direction dis_chg dir_chg tackle */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.dist_change = $3;
		$$.dir_change = $4;
		$$.tackle = true;
	}
	| NUMBER NUMBER NUMBER NUMBER K /* distance direction dis_chg dir_chg kick */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.dist_change = $3;
		$$.dir_change = $4;
		$$.kick = true;
	}
	| NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER  /* distance direction dis_chg dir_chg body_dir head_dir */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.dist_change = $3;
		$$.dir_change = $4;
		$$.body_facing_dir = $5;
		$$.head_facing_dir = $6;
	}
	| NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER /* distance direction dis_chg dir_chg body_dir head_dir point_dir */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.dist_change = $3;
		$$.dir_change = $4;
		$$.body_facing_dir =$5;
		$$.head_facing_dir = $6;
		$$.pointing_dir = $7;
	}
	| NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER T /* distance direction dis_chg dir_chg body_dir head_dir tackle */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.dist_change = $3;
		$$.dir_change = $4;
		$$.body_facing_dir =$5;
		$$.head_facing_dir = $6;
		$$.tackle = true;
	}
	| NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER K /* distance direction dis_chg dir_chg body_dir head_dir kick */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.dist_change = $3;
		$$.dir_change = $4;
		$$.body_facing_dir =$5;
		$$.head_facing_dir = $6;
		$$.kick = true;
	}
	| NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER T /* */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.dist_change = $3;
		$$.dir_change = $4;
		$$.body_facing_dir =$5;
		$$.head_facing_dir = $6;
		$$.pointing_dir = $7;
		$$.tackle = true;	
	}
	| NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER K /*  */
	{
		$$.distance = $1;
		$$.direction = $2;
		$$.dist_change = $3;
		$$.dir_change = $4;
		$$.body_facing_dir =$5;
		$$.head_facing_dir = $6;
		$$.pointing_dir = $7;
		$$.kick = true;
	}
;

/*****************************************************************************/
/*******************            SENSE_BODY            ************************/
/*****************************************************************************/

sense_body: LP BODY NUMBER sense_body_items RP
	{
		tmp_sense_body.time = $3;
	}
;

sense_body_items: 
	sense_body_item
	| sense_body_items sense_body_item
;

sense_body_item: 
	LP VIEW_MODE view_qual view_width RP 
	{
		tmp_sense_body.view_mode_quality = $3;
		tmp_sense_body.view_mode_width = $4;
	}
	| LP STAMINA NUMBER NUMBER NUMBER RP  /* stamina effort capacity */	
	{
		tmp_sense_body.stamina_stamina = $3;
		tmp_sense_body.stamina_effort = $4;
		tmp_sense_body.stamina_capacity = $5;

	}
	| LP SPEED NUMBER NUMBER RP /* amount direction  */
	{
		tmp_sense_body.speed_amount = $3;
		tmp_sense_body.speed_direction = $4;
	}
	| LP HEAD_ANGLE NUMBER RP
	{
		tmp_sense_body.head_angle = $3;
	}
	| LP KICK NUMBER RP /* count */
	{
		tmp_sense_body.kick_count = $3;
	}
	| LP DASH NUMBER RP /* count */
	{
		tmp_sense_body.dash_count = $3;
	}
	| LP TURN NUMBER RP /* count */
	{
		tmp_sense_body.turn_count = $3;
	}
	| LP SAY NUMBER RP /* count */
	{
		tmp_sense_body.say_count = $3;
	}
	| LP TURN_NECK NUMBER RP /* count */
	{
		tmp_sense_body.turn_neck_count = $3;
	}
	| LP CATCH NUMBER RP /* count */
	{
		tmp_sense_body.catch_count = $3;
	}
	| LP MOVE NUMBER RP /* count */
	{
		tmp_sense_body.move_count = $3;
	}
	| LP CHANGE_VIEW NUMBER RP /* count */
	{
		tmp_sense_body.change_view_count = $3;
	}
	| LP ARM 	
			LP MOVABLE NUMBER RP 
			LP EXPIRES NUMBER RP
			LP TARGET NUMBER NUMBER RP
			LP COUNT NUMBER RP
		  RP
	{
		tmp_sense_body.arm_movable_cycles=$5;
		tmp_sense_body.arm_expires_cycles = $9;
		tmp_sense_body.arm_target_distance=$13;
		tmp_sense_body.arm_target_direction=$14;
		tmp_sense_body.arm_count=$18;
	}

	| LP FOCUS 	LP TARGET NONE RP
				LP COUNT NUMBER RP
				RP
	{
		tmp_sense_body.focus_target = SIDE_NONE;
		tmp_sense_body.focus_target_number = -1;
		tmp_sense_body.focus_count = $9;
	}
	| FOCUS 	LP TARGET side NUMBER RP
				LP COUNT NUMBER RP
				RP
	{
		tmp_sense_body.focus_target = $4;
		tmp_sense_body.focus_target_number = $5;
		tmp_sense_body.focus_count = $9;
	}
	| LP TACKLE LP EXPIRES NUMBER RP
				LP COUNT NUMBER RP
				RP
	{
		tmp_sense_body.tackle_expires_cycles = $5;
		tmp_sense_body.tackle_count = $9;
	}
	| LP COLLISION collision RP
	{
		/* The assignation is done in collision_item rule */
	}
	| LP FOUL 	LP CHARGED NUMBER RP
				LP CARD card RP
				RP
	{
		tmp_sense_body.foul_charged_cycles = $5;
		tmp_sense_body.foul_card= $9;
	}
;

view_qual: 
	HIGH  { $$ = VIEW_QUALITY_HIGH; }
	| LOW { $$ = VIEW_QUALITY_LOW; }
;

view_width: 
	NARROW  { $$ = VIEW_WIDTH_NARROW; }
	| NORMAL { $$ = VIEW_WIDTH_NORMAL; }
	| WIDE 	{ $$ = VIEW_WIDTH_WIDE; }
;


collision: collision_item
		| collision collision_item
;

collision_item:
	NONE

	| LP BALL RP 
	{ 
		tmp_sense_body.collisions.push_back( COLLISION_BALL ); 
	}
	| LP PLAYER RP 
	{
		tmp_sense_body.collisions.push_back( COLLISION_PLAYER ); 
	}
	| LP POST RP
	{
		tmp_sense_body.collisions.push_back( COLLISION_POST ); 	
	}
	| LP IDENTIFIER RP 
	{ 
		std::cerr << "ClientParser: Unknown collision "
				<< "\"" << $2 << "\""  
				<< std::endl;
	}
;


card: 
	NONE 	{ $$ = FOUL_CARD_NONE; }
	| YELLOW { $$ = FOUL_CARD_YELLOW; }
	| RED 	{ $$ = FOUL_CARD_RED; }
;

/*****************************************************************************/
/***********************            HEAR            **************************/
/*****************************************************************************/

hear: 
	LP HEAR NUMBER REFEREE playmode RP /*HEAR time REFEREE playmode */
	{
		tmp_hear.time 		=  $3;
		tmp_hear.sender 	= SENDER_REFEREE;
		tmp_hear.playmode 	= from_PM_to_PMH( $5 ); 
	}

	| LP HEAR NUMBER REFEREE playmode_hearable RP /*HEAR time REFEREE playmode  */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_REFEREE;
		tmp_hear.playmode 	= $5;
		
	}| LP HEAR NUMBER REFEREE HALF_TIME RP /*HEAR time REFEREE playmode  */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_REFEREE;
		tmp_hear.playmode 	= PMH_HALF_TIME; 
	}
	| LP HEAR NUMBER REFEREE GOAL_L_NUMBER RP /*HEAR time REFEREE ... */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_REFEREE;
		tmp_hear.playmode 	= PMH_GOAL_L;
		tmp_hear.goals 		= $5;
	}
	| LP HEAR NUMBER REFEREE GOAL_R_NUMBER RP /*HEAR time REFEREE ... */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_REFEREE;
		tmp_hear.playmode 	= PMH_GOAL_R; 
		tmp_hear.goals 		= $5;

	}
	| LP HEAR NUMBER REFEREE YELLOW_CARD_L_NUMBER RP /*HEAR time REFEREE ... */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_REFEREE;
		tmp_hear.playmode 	= PMH_YELLOW_CARD_L;
		tmp_hear.cards 		= $5;
	}
	| LP HEAR NUMBER REFEREE YELLOW_CARD_R_NUMBER RP /*HEAR time REFEREE ... */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_REFEREE;
		tmp_hear.playmode 	= PMH_YELLOW_CARD_R; 
		tmp_hear.cards 		= $5;

	}
	| LP HEAR NUMBER REFEREE RED_CARD_L_NUMBER RP /*HEAR time REFEREE ... */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_REFEREE;
		tmp_hear.playmode 	= PMH_RED_CARD_L;
		tmp_hear.cards 		= $5;
	}
	| LP HEAR NUMBER REFEREE RED_CARD_R_NUMBER RP /*HEAR time REFEREE ... */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_REFEREE;
		tmp_hear.playmode 	= PMH_RED_CARD_R; 
		tmp_hear.cards 		= $5;
	}
	| LP HEAR NUMBER REFEREE IDENTIFIER RP /*HEAR time REFEREE msg */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_REFEREE;
		tmp_hear.playmode 	= PMH_NULL;
		tmp_hear.message 	= $5;
		std::cerr << "ClientParser: "
				<< "Unkown HEAR NUMBER REFEREE form \"" << $5 << "\""
				<< std::endl;

	}
	
	| LP HEAR NUMBER ONLINE_COACH_LEFT STRING RP /*HEAR time ON_COACH msg */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_ONLINE_COACH_L;
		tmp_hear.message 	= $5; 
	}
	| LP HEAR NUMBER ONLINE_COACH_RIGHT STRING RP /*HEAR time ON_COACH msg */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_ONLINE_COACH_R;
		tmp_hear.message 	= $5; 
	}
	| LP HEAR NUMBER SELF STRING RP /*HEAR time SELF msg */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_SELF;
		tmp_hear.message 	= $5; 
	}
	| LP HEAR NUMBER COACH STRING RP /*HEAR time OFF_COACH msg */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_OFFLINE_COACH;
		tmp_hear.message 	= $5; 
	}
	| LP HEAR NUMBER NUMBER OUR NUMBER STRING RP /* HEAR time direction OUR unum msg */
	{
		tmp_hear.time 		= $3;
		tmp_hear.direction 	= $4;
		tmp_hear.sender 	= SENDER_OUR;
		tmp_hear.unum 		= $6;
		tmp_hear.message 	= $7;
	}
	| LP HEAR NUMBER NUMBER OPP STRING RP /* HEAR time direction OPP msg  */
	{
		tmp_hear.time 		= $3;
		tmp_hear.direction 	= $4;
		tmp_hear.sender 	= SENDER_OPP;
		tmp_hear.message 	= $6;
	}
	| LP HEAR NUMBER OUR NUMBER RP /* HEAR time OUR unum */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_OUR;
		tmp_hear.unum 		= $5;
	}
	| LP HEAR NUMBER OPP RP /* HEAR time OPP */ 
	{
		tmp_hear.time  		= $3;
		tmp_hear.sender 	= SENDER_OPP;
	}
	/* ADVICE */
	/* The online coach msg needs to be updated with the syntax of The Standard Coach Language. */
	/* The purpose of the two forms given in this version is providing a placeholder for 	    */
	/* further implementations. */
	| LP HEAR NUMBER ONLINE_COACH_LEFT IDENTIFIER RP /* HEAR time ON_COACH msg */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_ONLINE_COACH_L;
		tmp_hear.message 	= $5;
	}
	| LP HEAR NUMBER ONLINE_COACH_RIGHT IDENTIFIER RP /* HEAR time ON_COACH msg */
	{
		tmp_hear.time 		= $3;
		tmp_hear.sender 	= SENDER_ONLINE_COACH_R;
		tmp_hear.message 	= $5;
	}
	| LP HEAR FOUL_L RP 
	{

	}
	| LP HEAR FOUL_R RP 
	{

	}
;

playmode_hearable:
	TIME_UP { $$ == PMH_TIME_UP; }
	| GOALIE_CATCH_BALL_L { $$ == PMH_GOALIE_CATCH_BALL_L; }
	| GOALIE_CATCH_BALL_R { $$ == PMH_GOALIE_CATCH_BALL_R; }
	| PENALTY_ONFIELD_L { $$ = PMH_PENALTY_ONFIELD_L;}
	| PENALTY_ONFIELD_R { $$ = PMH_PENALTY_ONFIELD_R;}
	| PENALTY_FOUL_R { $$ = PMH_PENALTY_FOUL_R;}
	| PENALTY_FOUL_L { $$ = PMH_PENALTY_FOUL_L;}
	| PENALTY_WINNER_L { $$ = PMH_PENALTY_WINNER_L;}
	| PENALTY_WINNER_R { $$ = PMH_PENALTY_WINNER_R;}
	| PENALTY_DRAW { $$ = PMH_PENALTY_DRAW;}
	| FOUL_L { $$ = PMH_FOUL_L; }
	| FOUL_R { $$ = PMH_FOUL_R; }

;

/*****************************************************************************/
/**********************            ERROR            **************************/
/*****************************************************************************/

errorr: 
	LP ERROR error_type RP 
	{
		tmp_error.type = $3;
	}
	| LP ERROR IDENTIFIER RP
	{
		tmp_error.unkown_error = $3;
		std::cerr << "ClientParser: Unkown error_type "
				<< "\"" << $3 << "\""
				<< std::endl;
	}
;

error_type: 
	CONNECTION_FAILED { $$ = ET_CONNECTION_FAILED; }
	| ILLEGAL_COMMAND_FORM { $$ = ET_ILLEGAL_COMMAND_FORM; }
	| ILLEGAL_TEAMNAME { $$ = ET_ILLEGAL_TEAMNAME; }
	| ILLEGAL_TEAMNAME_OR_TOO_LONG_TEAMNAME { $$ = ET_ILLEGAL_TEAMNAME_OR_TOO_LONG_TEAMNAME; }
	| NO_MORE_TEAM { $$ = ET_NO_MORE_TEAM; }
	| NO_MORE_PLAYER_OR_GOALIE_OR_ILLEGAL_CLIENT_VERSION  { $$ = ET_NO_MORE_PLAYER_OR_GOALIE_OR_ILLEGAL_CLIENT_VERSION; }
	| SOCKET_OPEN_FAILED { $$ = ET_SOCKET_OPEN_FAILED; }
	| ILLEGAL_CLIENT_VERSION { $$ = ET_ILLEGAL_CLIENT_VERSION; }
	| NO_SUCH_TEAM_OR_PLAYER { $$ = ET_NO_SUCH_TEAM_OR_PLAYER; }
	| CANNOT_RECONNECT_WHILE_PLAYON { $$ = ET_CANNOT_RECONNECT_WHILE_PLAYON; }
		
		
;


/*****************************************************************************/
/**********************            SCORE            **************************/
/*****************************************************************************/

score: 
	LP SCORE NUMBER NUMBER RP /* SCORE ours theirs */
	{
		tmp_score.ours 		= $3;
		tmp_score.theirs 	= $4;
	}
;

/*****************************************************************************/
/**********************          WARNING           ***************************/
/*****************************************************************************/

warning: 
	LP WARNING warning_type RP
	{
		tmp_warning.type = $3;
	}
	|
	LP WARNING IDENTIFIER RP
	{
		tmp_warning.unkown_warning = $3;
		std::cerr << "ClientParser: Unkown warning_type "
				<< "\"" << $3 << "\""
				<< std::endl;

	}
;

warning_type:
	 MESSAGE_NOT_NULL_TERMINATED { $$ = W_MSG_NOT_NULL_TERMINATED; }
	| NO_TEAM_FOUND { $$ = W_NO_TEAM_FOUND; }
	| NO_SUCH_PLAYER { $$ = W_NO_SUCH_PLAYER; }
	| CANNOT_SUB_WHILE_PLAYON { $$ = W_CANNOT_SUB_WHILE_PLAYON; }
	| NO_SUBS_LEFT { $$ = W_NO_SUBS_LEFT; }
	| MAX_OF_THAT_TYPE_OF_FIELD { $$ = W_MAX_OF_THAT_TYPE_OF_FIELD; }
	| CANNOT_CHANGE_GOALIE { $$ = W_CANNOT_CHANGE_GOALIE; } 
	| COMPRESSION_UNSUPPORTED { $$ = W_COMPRESSION_UNSUPPORTED; }
;

/*****************************************************************************/
/**********************             OK              **************************/
/*****************************************************************************/

ok: LP OK IDENTIFIER RP
{
	tmp_ok.ok_msg = $3;
}
;


/*****************************************************************************/
/******************          CHANGE_PLAYER_TYPE           ********************/
/*****************************************************************************/


change_player_type: LP CHANGE_PLAYER_TYPE NUMBER RP
	{
		/* rcsssever 15.0.1 sends this form when an internal error occurs.  */
	}
	| LP CHANGE_PLAYER_TYPE NUMBER NUMBER RP
	{
		tmp_chg_player_type.unum = $3;
		tmp_chg_player_type.type = $4;
	}
;

%%




void
yy::RcssParser::error (	const location_type & l,
						const std::string 	& m )
{
	driver.error ( l, m );
}
